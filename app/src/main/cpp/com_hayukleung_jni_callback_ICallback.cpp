/* DO NOT EDIT THIS FILE - it is machine generated */
#include <stdint.h>
#include "com_hayukleung_jni_callback_ICallback.h"

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_hayukleung_jni_callback_ICallback
 * Method:    callback
 * Signature: ()J
 */
JNIEXPORT void JNICALL Java_com_hayukleung_jni_callback_ICallback_callback
        (JNIEnv *env, jobject obj) {

    // method 0
    jclass clz = env->FindClass("com/hayukleung/jni/callback/ICallback");
    jmethodID mID = env->GetMethodID(clz, "<init>", "()V");
    jobject objCallback = env->NewObject(clz, mID);

    // method 1
    // jclass clz = env->GetObjectClass(obj);

    if (NULL == clz) {
        LOG("Class is null.");
        return;
    } else {
        LOG("Class is not null.");
    }
    /**
     * | Java类型 |对应的签名            | 例子 |
     * |:------- | :------------------ | :-- |
     * | boolean | Z
     * | byte	 | B
     * | char	 | C
     * | short   | S
     * | int	 | I
     * | long	 | L
     * | float   | F
     * | double  | D
     * | void    | V
     * | Object	 | L用/分割包的完整类名; | Ljava/lang/String;
     * | Array	 | [签名               | [I or [Ljava/lang/String;
     */
    jmethodID idVoid = env->GetMethodID(clz, "onCallback", "()V");
    if (NULL == idVoid) {
        LOG("Class is null.");
        return;
    }
    jmethodID idInt = env->GetMethodID(clz, "onCallback", "(I)V");
    if (NULL == idInt) {
        LOG("Class is null.");
        return;
    }
    jmethodID idString = env->GetMethodID(clz, "onCallback", "(Ljava/lang/String;)V");
    if (NULL == idString) {
        LOG("Class is null.");
        return;
    }

    jstring msg = env->NewStringUTF("Hi, I'm From C");

    // method 0
    env->CallVoidMethod(obj, idVoid);
    env->CallVoidMethod(obj, idInt, 1024);
    env->CallVoidMethod(obj, idString, msg);
    // method 1
    env->CallVoidMethod(objCallback, idVoid);
    env->CallVoidMethod(objCallback, idInt, 2048);
    env->CallVoidMethod(objCallback, idString, msg);
}

#ifdef __cplusplus
}
#endif
